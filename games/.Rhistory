return (TRUE)
return(FALSE)
},
align = "center", fill = NA)
return(which(t))
}
showAnomalies(s, detectionEM1(s$y))
showAnomalies(s, detectionEM1(s$y, 2))
showAnomalies(s, detectionEM1(s$y, 3))
r = detectionEM1(s$y, 3)
showAnomalies(s, r)
compareAnomalies(lapply(s$g, head, n = 1), r)
r = detectionEM1(s$y, 1)
showAnomalies(s, r)
compareAnomalies(lapply(s$g, head, n = 1), r)
r = detectionEM1(s$y, 2)
showAnomalies(s, r)
compareAnomalies(lapply(s$g, head, n = 1), r)
r = detectionEM1(s$y, 5)
showAnomalies(s, r)
compareAnomalies(lapply(s$g, head, n = 1), r)
r = detectionEM1(s$y, 10)
showAnomalies(s, r)
compareAnomalies(lapply(s$g, head, n = 1), r)
r = detectionEM1(s$y, 20)
showAnomalies(s, r)
compareAnomalies(lapply(s$g, head, n = 1), r)
r = detectionEM1(s$y, 50)
showAnomalies(s, r)
compareAnomalies(lapply(s$g, head, n = 1), r)
?Mclust
detectionEM1 <- function(x, d = 1) {
# x : time serie
# d : distance to neighbours
require(mclust)
require(zoo)
r = Mclust(x, G=1:20)
p = apply(r$z, 1, which.max)
t = rollapply(p, 1 + 2*d,
function(sub) {
if (sum(sub == sub[ceiling(length(sub)/2)]) < (length(sub)/2))
return (TRUE)
return(FALSE)
},
align = "center", fill = NA)
return(which(t))
}
r = detectionEM1(s$y, 1)
showAnomalies(s, r)
compareAnomalies(lapply(s$g, head, n = 1), r)
r = detectionEM1(s$y, 2)
showAnomalies(s, r)
compareAnomalies(lapply(s$g, head, n = 1), r)
r = detectionEM1(s$y, 50)
showAnomalies(s, r)
compareAnomalies(lapply(s$g, head, n = 1), r)
install.packages("RCassandra")
library(RCassandra)
??cassandra
con <- RC.connect("10.0.2.15")
con <- RC.connect("10.0.2.15", port = 9042)
con <- RC.connect("10.0.2.1", port = 9042)
con
RC.describe.keyspaces(con)
RC.close(con)
con <- RC.connect("10.0.2.1")
con <- RC.connect("10.0.2.1")
con <- RC.connect("10.0.2.1")
RC.describe.keyspaces(con)
RC.write.table(c, "iris", iris)
RC.write.table(con, "iris", iris)
desc <- RC.describe.keyspaces(con)
names(desc)
names(desc$system)
RC.use(con, "testdb")
names(RC.describe.keyspaces(con))
RC.use(con, "demo")
RC.write.table(con, "iris", iris)
names(iris)
RC.write.table(con, "iris", iris)
iris
seq(10)
iris = cbind(iris, seq(nrow(iris)))
RC.write.table(con, "iris", iris)
iris = cbind(iris, id = seq(nrow(iris)))
RC.write.table(con, "iris", iris)
data()
Pigs
LifeCycleSavings
names(RC.describe.keyspaces(con))
RC.get(con, "users")
RC.get.range(c, "users", "1")
RC.get(con, "users", "lastname")
RC.get(con, "lastname", "users")
RC.get(con, "users", "1", lastname")
RC.get(con, "users", "1", "lastname")
RC.get(con, "users", "1", "lastname")
RC.get(con, "users", "2", "lastname")
RC.get(con, "users", "Doe", "lastname")
RC.get.range(c, "users", "1")
RC.get.range(con, "users", "1")
RC.get.range(con, "users", "lastname")
RC.get.range(con, "users", "Doe")
RC.get.range(con, "users", "lastname")
RC.get(con, "users", "Doe", "lastname")
RC.get(con, "users", "lastname")
RC.get(con, "users", "lastname", "1")
RC.get(con, "users", "lastname", "firstname")
RC.get(con, "users", "Doe", "firstname")
RC.get(con, "users", "Doe", "lasstname")
RC.get(con, "users", "Doe", "lastname")
RC.read.table(con, "users")
RC.read.table(con, "users")
RC.describe.keyspaces(con)$demo
?RC.describe.keyspace
RC.describe.keyspace(con, demo)
RC.describe.keyspace(con, "demo")
RC.get.range.slices(conn, "users")
RC.get.range.slices(con, "users")
RC.get.range(con, "users", "lastname")
RC.read.table(con, "users")
RC.read.table(con, "test")
RC.get.range.slices(con, "test")
RC.read.table(con, "test")
RC.get.range.slices(con, "test")
RC.read.table
RC.get.range.slices(con, "test", fixed = T)
RC.get.range.slices(con, "test")
RC.get.range.slices
RC.read.table(con, "test")
RC.get.range.slices(con, "test")
RC.read.table(con, "test")
names(RC.read.table(con, "test"))
rownames(RC.read.table(con, "test"))
colnames(RC.read.table(con, "test"))
dim(RC.read.table(con, "test"))
RC.read.table(con, "test")
RC.read.table(con, "test")
RC.read.table(con, "test")
RC.get.range.slices(con, "test")
RC.read.table(con, "test")
RC.get.range.slices(con, "test")
RC.get.range(con, "test")
RC.get.range(con, "test", "1")
RC.get.range(con, "test", c("1", "2"))
RC.get.range(con, "test", "1")
RC.mget.range(con, "test", c("1", "2"))
RC.get(con, "test")
RC.get(con, "test", "1")
RC.get(con, "test", "1", "2")
RC.get(con, "test", "1", "b")
RC.get(con, "test", "1")
RC.get(con, "test", "1", "c")
RC.get(con, "test", "1", "a")
RC.get(con, "test", "1", "c")
RC.get(con, "test", "1", "a")
RC.get(con, "test", "1", c("a", "b"))
RC.describe.keyspace(con, "test")
RC.describe.keyspace(con, "demo")
RC.get(con, "test", "1", c("a", "b"))
RC.mget.range(con, "test", c("1", "2"))
RC.get.range.slices(con, "test")
RC.describe.keyspace(con, "demo")
RC.read.table(con, "test")
RC.get.range.slices(con, "test")
RC.get(con, "test", "1", 1:2)
RC.get(con, "test", "1", 1)
RC.get(con, "test", "1", "1")
RC.get(con, "test", "1", "2")
RC.get(con, "test", "1", "")
RC.get(con, "test", "1", "premier")
RC.get(con, "test", "1", "a")
RC.get(con, "test", "1", "b")
RC.describe.keyspace(con, "demo")
RC.read.table(con, "test")
??schema
??RC
RC.cluster.name(con)
??RC
RC.mutate
?RC.mutate
RC.mget.range(con, "test", c("1", "2"))
RC.get.range(con, "test", "1")
RC.get.range.slices(con, "test")
class(RC.get.range.slices(con, "test"))
lapply(RC.get.range.slices(con, "test"), "length")
lapply(RC.get.range.slices(con, "test"), "print")
lapply(RC.get.range.slices(con, "test"), "dim")
lapply(RC.get.range.slices(con, "test"), "rownames")
lapply(RC.get.range.slices(con, "test"), "colnames")
lapply(RC.get.range.slices(con, "test"), "rownames")
lapply(RC.get.range.slices(con, "test"), "attributes")
class(iris$Species)
summary(iris$Species)
levels(iris$Species)
iris$Sp = factor(iris$Species, labels = c("a", "a", "b"))
iris$Sp[which(iris$Sp == 'versicolor')] = 'virginica'
which(iris$Sp == 'versicolor')
iris$Sp
iris$Sp = iris$Species
iris$Sp[which(iris$Sp == 'versicolor')] = 'virginica'
summary(iris$Sp)
levels(iris$Sp)
levels(iris$Sp)[2] = NULL
as.factor(iris$Sp)
factor(iris$Sp)
getwd()
setwd("Sites/STID2AFA-nba-analysis/games")
s = dir()
s
dir(path = s[1])
m = dir(path = s[1])
m
m[m != "games.json"]
?dir
dir(path = s[1], pattern = "[0-9]*")
dir(path = s[1], pattern = "[0-9]+")
m = dir(path = s[1], pattern = "[0-9]+")
substr(m, 7, 10)
as.integer(substr(m, 7, 10))
m
m[1]
m[-1]
m[length(m)]
matchs = NULL
for (s in dir()) {
m = dir(path = s[1])
matchs = cbiund(matchs, c(deb = m[1], fin = m[length(m)]))
}
matchs = NULL
for (s in dir()) {
m = dir(path = s[1])
matchs = cbind(matchs, c(deb = m[1], fin = m[length(m)]))
}
matchs
matchs = NULL
for (s in dir()) {
m = dir(path = s[1], pattern = "[0-9]+")
matchs = cbind(matchs, c(deb = m[1], fin = m[length(m)]))
}
matchs
matchs = NULL
for (s in dir()) {
m = dir(path = s[1], pattern = "[0-9]+")
matchs = rbind(matchs, c(deb = m[1], fin = m[length(m)]))
}
matchs
matchs = NULL
for (s in dir()) {
m = dir(path = s, pattern = "[0-9]+")
matchs = rbind(matchs, c(soiree = s, deb = m[1], fin = m[length(m)]))
}
matchs = NULL
for (s in dir()) {
m = dir(path = s, pattern = "[0-9]+")
if (m) matchs = rbind(matchs, c(soiree = s, deb = m[1], fin = m[length(m)]))
}
m
s
length(NULL)
matchs = NULL
for (s in dir()) {
m = dir(path = s, pattern = "[0-9]+")
if (length(m)>0) matchs = rbind(matchs, c(soiree = s, deb = m[1], fin = m[length(m)]))
}
matchs
matchs = NULL
for (s in dir()) {
m = substr(dir(path = s, pattern = "[0-9]+"), 7, 10
if (length(m)>0) matchs = rbind(matchs, c(soiree = s, deb = m[1], fin = m[length(m)]))
}
head(matchs)
matchs = NULL
for (s in dir()) {
m = substr(dir(path = s, pattern = "[0-9]+"), 7, 10)
if (length(m)>0) matchs = rbind(matchs, c(soiree = s, deb = m[1], fin = m[length(m)]))
}
head(matchs)
matchs = NULL
for (s in dir()) {
m = as.integer(substr(dir(path = s, pattern = "[0-9]+"), 7, 10))
if (length(m)>0) matchs = rbind(matchs, c(soiree = s, deb = m[1], fin = m[length(m)]))
}
head(matchs)
matchs$precedent = c(NA, matchs$fin[-nrow(matchs)])
class(matchs)
matchs = as.data.frame(matchs)
matchs$precedent = c(NA, matchs$fin[-nrow(matchs)])
head(matchs)
matchs$fin[-nrow(matchs)]
c(NA, matchs$fin[-nrow(matchs)])
matchs = as.data.frame(matchs, strings = FALSE)
matchs = NULL
for (s in dir()) {
m = as.integer(substr(dir(path = s, pattern = "[0-9]+"), 7, 10))
if (length(m)>0) matchs = rbind(matchs, c(soiree = s, deb = m[1], fin = m[length(m)]))
}
matchs = as.data.frame(matchs, strings = FALSE)
matchs$precedent = c(NA, matchs$fin[-nrow(matchs)])
head(matchs)
matchs
summary(matchs)
matchs = NULL
for (s in dir()) {
m = as.integer(substr(dir(path = s, pattern = "[0-9]+"), 7, 10))
if (length(m)>0) matchs = rbind(matchs, c(soiree = s, deb = m[1], fin = m[length(m)]))
}
matchs = as.data.frame(matchs, stringsAsFactors = FALSE)
matchs$precedent = c(NA, matchs$fin[-nrow(matchs)])
head(matchs)
summary(matchs)
m
class(m)
summary(m)
summary(matchs)
summary(matchs$deb)
matchs = NULL
for (s in dir()) {
m = as.integer(substr(dir(path = s, pattern = "[0-9]+"), 7, 10))
if (length(m)>0) matchs = rbind(matchs, c(soiree = as.integer(s), deb = m[1], fin = m[length(m)]))
}
matchs = as.data.frame(matchs, stringsAsFactors = FALSE)
matchs$precedent = c(NA, matchs$fin[-nrow(matchs)])
head(matchs)
summary(matchs)
matchs$problem = (match$debut != match$precedent+1)
match$debut != match$precedent+1)
matchs = NULL
for (s in dir()) {
m = as.integer(substr(dir(path = s, pattern = "[0-9]+"), 7, 10))
if (length(m)>0) matchs = rbind(matchs, c(soiree = as.integer(s), deb = m[1], fin = m[length(m)]))
}
matchs = as.data.frame(matchs)
matchs$precedent = c(0, matchs$fin[-nrow(matchs)])
matchs$problem = (match$debut != match$precedent+1)
head(matchs)
matchs = NULL
for (s in dir()) {
m = as.integer(substr(dir(path = s, pattern = "[0-9]+"), 7, 10))
if (length(m)>0) matchs = rbind(matchs, c(soiree = as.integer(s), deb = m[1], fin = m[length(m)]))
}
matchs = as.data.frame(matchs)
matchs$precedent = c(0, matchs$fin[-nrow(matchs)])
matchs$problem = (matchs$debut != matchs$precedent+1)
head(matchs)
matchs$debut != matchs$precedent+1)
matchs$debut != matchs$precedent+1
matchs$debut != (matchs$precedent+1)
matchs$debut
matchs$precedent = c(0, matchs$fin[-nrow(matchs)])
matchs = NULL
for (s in dir()) {
m = as.integer(substr(dir(path = s, pattern = "[0-9]+"), 7, 10))
if (length(m)>0) matchs = rbind(matchs, c(soiree = as.integer(s), deb = m[1], fin = m[length(m)]))
}
matchs = as.data.frame(matchs)
matchs$precedent = c(0, matchs$fin[-nrow(matchs)])
matchs$problem = (matchs$deb != matchs$precedent+1)
head(matchs)
summary(match)
summary(matchs)
subset(matchs, problem == T)
matchs = NULL
for (s in dir()) {
m = as.integer(substr(dir(path = s, pattern = "[0-9]+"), 6, 10))
if (length(m)>0) matchs = rbind(matchs, c(soiree = as.integer(s), deb = m[1], fin = m[length(m)]))
}
matchs = as.data.frame(matchs)
matchs$precedent = c(0, matchs$fin[-nrow(matchs)])
matchs$problem = (matchs$deb != matchs$precedent+1)
head(matchs)
subset(matchs, problem == T)
matchs = NULL
for (s in dir()) {
m = as.integer(substr(dir(path = s, pattern = "[0-9]+"), 6, 10))
if (length(m)>0) matchs = rbind(matchs, c(soiree = as.integer(s), deb = m[1], fin = m[length(m)]))
}
matchs = as.data.frame(matchs)
matchs$precedent = c(0, matchs$fin[-nrow(matchs)])
matchs$problem = (matchs$deb != matchs$precedent+1)
head(matchs)
subset(matchs, problem == T)
length(dir())
159*10
159*10/60
matchs = NULL
liste = null
for (s in dir()) {
m = as.integer(substr(dir(path = s, pattern = "[0-9]+"), 6, 10))
liste = c(liste, m)
if (length(m)>0) matchs = rbind(matchs, c(soiree = as.integer(s), deb = m[1], fin = m[length(m)]))
}
matchs = as.data.frame(matchs)
matchs$precedent = c(0, matchs$fin[-nrow(matchs)])
matchs$problem = (matchs$deb != matchs$precedent+1)
head(matchs)
subset(matchs, problem == T)
matchs = NULL
liste = NULL
for (s in dir()) {
m = as.integer(substr(dir(path = s, pattern = "[0-9]+"), 6, 10))
liste = c(liste, m)
if (length(m)>0) matchs = rbind(matchs, c(soiree = as.integer(s), deb = m[1], fin = m[length(m)]))
}
matchs = as.data.frame(matchs)
matchs$precedent = c(0, matchs$fin[-nrow(matchs)])
matchs$problem = (matchs$deb != matchs$precedent+1)
head(matchs)
subset(matchs, problem == T)
liste
dir()
liste
liste==(1:length(liste))
sum(liste==(1:length(liste)))
order(liste)
liste
liste-c(0, liste[1:(length(liste)-1)])
liste-c(0, liste[1:(length(liste)-1)])
listeo = order(liste)
listeo-c(0, listeo[1:(length(listeo)-1)])
sum(listeo==(1:length(listeo)))
sum((listeo==(1:length(listeo)))-1)
matchs = NULL
liste = NULL
for (s in dir()) {
m = as.integer(substr(dir(path = s, pattern = "[0-9]+"), 6, 10))
liste = c(liste, m)
if (length(m)>0) matchs = rbind(matchs, c(soiree = as.integer(s), deb = m[1], fin = m[length(m)]))
}
matchs = as.data.frame(matchs)
matchs$precedent = c(0, matchs$fin[-nrow(matchs)])
matchs$problem = (matchs$deb != matchs$precedent+1)
head(matchs)
subset(matchs, problem == T)
liste-c(0, liste[1:(length(liste)-1)])
listeo = order(liste)
listeo-c(0, listeo[1:(length(listeo)-1)])
sum((listeo==(1:length(listeo)))-1)
liste
matchs = NULL
liste = NULL
for (s in dir()) {
m = as.integer(substr(dir(path = s, pattern = "[0-9]+"), 6, 10))
liste = c(liste, m)
if (length(m)>0) matchs = rbind(matchs, c(soiree = as.integer(s), deb = m[1], fin = m[length(m)]))
}
matchs = as.data.frame(matchs)
matchs$precedent = c(0, matchs$fin[-nrow(matchs)])
matchs$problem = (matchs$deb != matchs$precedent+1)
head(matchs)
subset(matchs, problem == T)
listeo = order(liste)
listeo-c(0, listeo[1:(length(listeo)-1)])
sum((listeo==(1:length(listeo)))-1)
listeo
liste
class(liste)
order(liste)
?order
sum(liste)
sum((liste==(1:length(liste)))-1)
sum(liste)
sum(liste)-sum(1:length(liste))
head(order(liste))
head(order(liste, decreasing = T))
tail(order(liste, decreasing = T))
head(order(liste, method="shell"))
sort.list(liste)
head(sort.list(liste))
head(sort.list(liste, method = "shell"))
head(sort.list(liste, method = "quick"))
head(sort.list(liste, method = "radix"))
sort.list(c(1,2,3,4,5,799))
listeo = liste[order(liste)]
listeo
listeo-c(0, listeo[1:(length(listeo)-1)])
sum((liste==(1:length(liste)))-1)
subset(matchs, problem == T)
matchs = NULL
liste = NULL
for (s in dir()) {
m = as.integer(substr(dir(path = s, pattern = "[0-9]+"), 6, 10))
liste = c(liste, m)
if (length(m)>0) matchs = rbind(matchs, c(soiree = as.integer(s), deb = m[1], fin = m[length(m)]))
}
matchs = as.data.frame(matchs)
matchs$precedent = c(0, matchs$fin[-nrow(matchs)])
matchs$problem = (matchs$deb != matchs$precedent+1)
subset(matchs, problem == T)
sum(liste)-sum(1:length(liste))
listeo = liste[order(liste)]
listeo-c(0, listeo[1:(length(listeo)-1)])
sum((liste==(1:length(liste)))-1)
matchs = NULL
liste = NULL
for (s in dir()) {
m = as.integer(substr(dir(path = s, pattern = "00214[0-9]+"), 6, 10))
liste = c(liste, m)
if (length(m)>0) matchs = rbind(matchs, c(soiree = as.integer(s), deb = m[1], fin = m[length(m)]))
}
matchs = as.data.frame(matchs)
matchs$precedent = c(0, matchs$fin[-nrow(matchs)])
matchs$problem = (matchs$deb != matchs$precedent+1)
subset(matchs, problem == T)
sum(liste)-sum(1:length(liste))
listeo = liste[order(liste)]
listeo-c(0, listeo[1:(length(listeo)-1)])
sum((liste==(1:length(liste)))-1)
liste
length(1230)
length(liste)
sum(liste)-sum(1:length(liste))
